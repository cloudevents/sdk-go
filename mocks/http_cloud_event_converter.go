// Code generated by mockery v1.0.0
package mocks

import http "net/http"
import mock "github.com/stretchr/testify/mock"
import reflect "reflect"

// HTTPCloudEventConverter is an autogenerated mock type for the HTTPCloudEventConverter type
type HTTPCloudEventConverter struct {
	mock.Mock
}

// CanRead provides a mock function with given fields: t, mediaType
func (_m *HTTPCloudEventConverter) CanRead(t reflect.Type, mediaType string) bool {
	ret := _m.Called(t, mediaType)

	var r0 bool
	if rf, ok := ret.Get(0).(func(reflect.Type, string) bool); ok {
		r0 = rf(t, mediaType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanWrite provides a mock function with given fields: t, mediaType
func (_m *HTTPCloudEventConverter) CanWrite(t reflect.Type, mediaType string) bool {
	ret := _m.Called(t, mediaType)

	var r0 bool
	if rf, ok := ret.Get(0).(func(reflect.Type, string) bool); ok {
		r0 = rf(t, mediaType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Read provides a mock function with given fields: req, event
func (_m *HTTPCloudEventConverter) Read(req *http.Request, event interface{}) error {
	ret := _m.Called(req, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, interface{}) error); ok {
		r0 = rf(req, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: req, event
func (_m *HTTPCloudEventConverter) Write(req *http.Request, event interface{}) error {
	ret := _m.Called(req, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, interface{}) error); ok {
		r0 = rf(req, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
